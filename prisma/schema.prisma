generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String?  @unique
  fullName  String?
  password  String   // Hash password
  avatar    String?  // URL của ảnh đại diện
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  favorites Favorite[]
  comments  Comment[]
  reviews   Review[]

  @@map("users")
}

model Recipe {
  id           String   @id @default(cuid())
  title        String
  slug         String?  @unique // Thêm slug cho SEO
  image        String   // URL của ảnh món ăn
  prepTime     Int      // Thời gian chuẩn bị (phút)
  servings     Int      // Số người ăn
  category     String   // Danh mục món ăn
  ingredients  String[] // Mảng nguyên liệu
  instructions String[] // Mảng hướng dẫn nấu
  difficulty   String   @default("Dễ") // Mức độ khó: Dễ, Trung bình, Khó
  calories     Int?     // Số calories (tùy chọn)
  tags         String[] // Tags cho tìm kiếm
  isPublished  Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  favorites Favorite[]
  comments  Comment[]
  reviews   Review[]

  @@map("recipes")
}

model Category {
  id          String @id @default(cuid())
  name        String @unique
  slug        String @unique // Thêm slug cho URL
  image       String // URL của ảnh category
  description String? // Mô tả category
  recipeCount Int    @default(0) // Số lượng công thức

  @@map("categories")
}

model Favorite {
  id       String @id @default(cuid())
  userId   String
  recipeId String
  createdAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  // Unique constraint - một user chỉ có thể favorite một recipe một lần
  @@unique([userId, recipeId])
  @@map("favorites")
}

model Comment {
  id       String @id @default(cuid())
  content  String
  userId   String
  recipeId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Review {
  id       String @id @default(cuid())
  rating   Int    // 1-5 stars
  comment  String?
  userId   String
  recipeId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  // Unique constraint - một user chỉ có thể review một recipe một lần
  @@unique([userId, recipeId])
  @@map("reviews")
}
